<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>lhqqqqq's BLOG</title><link href="lhqqqqq.github.io/" rel="alternate"></link><link href="http://lhqqqqq.github.io/feeds/database.atom.xml" rel="self"></link><id>lhqqqqq.github.io/</id><updated>2015-04-16T18:28:37+08:00</updated><entry><title>MySQL之数据操纵</title><link href="lhqqqqq.github.io/database/MySQL.html" rel="alternate"></link><updated>2015-04-16T18:28:37+08:00</updated><author><name>lhqqqqq</name></author><id>tag:,2015-04-16:lhqqqqq.github.io/database/MySQL.html</id><summary type="html">&lt;!--MySQL之数据操纵--&gt;
&lt;h2 id=""&gt;&lt;/h2&gt;
&lt;h3 id="_1"&gt;一、基本语法&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;选择：select &amp;lt;fields&amp;gt; from &amp;lt;table&amp;gt; where &amp;lt;condition&amp;gt;;
插入：insert into &amp;lt;table&amp;gt;(&amp;lt;field1&amp;gt;,&amp;lt;field2&amp;gt;) values(&amp;lt;value1&amp;gt;,&amp;lt;value2&amp;gt;); 
删除：delete from &amp;lt;table&amp;gt; where &amp;lt;condition&amp;gt;; 
更新：update &amp;lt;table&amp;gt; set &amp;lt;field&amp;gt;=&amp;lt;value&amp;gt; where &amp;lt;condition&amp;gt;; 
查找：select &amp;lt;fields&amp;gt; from &amp;lt;table&amp;gt; where &amp;lt;field1&amp;gt; like '%&amp;lt;value&amp;gt;%' 
排序：select &amp;lt;fields&amp;gt; from &amp;lt;table&amp;gt; order by &amp;lt;field1&amp;gt;,&amp;lt;field2&amp;gt; [desc] [limit &amp;lt;number&amp;gt;];
总数：select count [as &amp;lt;columnname&amp;gt;] from table1; 
求和：select sum(&amp;lt;field&amp;gt;) from &amp;lt;table&amp;gt;; 
平均：select avg(&amp;lt;field&amp;gt;) from &amp;lt;table&amp;gt;; 
最大：select max(&amp;lt;field&amp;gt;) from &amp;lt;table&amp;gt;; 
最小：select min(&amp;lt;field&amp;gt;) from &amp;lt;table&amp;gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="join"&gt;二、join&lt;/h3&gt;
&lt;p&gt;举例说明&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Table1.
+----+-------+
| Id | book  |
+----+-------+
| 1  | java  |
| 2  | c++   |
| 3  | php   |
+----+-------+
Table2.
+----+-------+
| Id | author|
+----+-------+
| 2  | zhang |
| 2  | wang  |
| 3  | li    |
+----+-------+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Iner Join(内连接)&lt;/strong&gt; 将两个表中存在连接关系的字段，组成的记录集。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mysql&amp;gt; select * from table1 join table2 on table1.id=table2.id;  
+------+------+------+--------+  
| id   | book | id   | author |  
+------+------+------+--------+  
|    2 | c++  |    2 | zhang  |  
|    3 | php  |    3 | wang   |  
+------+------+------+--------+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用using子句&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mysql&amp;gt; select * from table1 inner join table2 using (id);  
+------+------+--------+  
| id   | book | author |  
+------+------+--------+  
|    2 | c++  | zhang  |  
|    3 | php  | wang   |  
+------+------+--------+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等价于 &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mysql&amp;gt; select table1.id as id,book,author from table1, table2 where table1.id=table2.id; 
mysql&amp;gt; select table1.id, book, author from table1 join table2 on table1.id=table2.id;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Cross Join(交叉连接)&lt;/strong&gt; 求两个表的笛卡尔积，可以用逗号表示，如(table1, table 2)。不使用on或using时，和Inner Join是等价的。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mysql&amp;gt; select * from table1 inner join table2;  
mysql&amp;gt; select * from table1 cross join table2;  
mysql&amp;gt; select * from (table1, table2);   
+------+------+------+--------+  
| id   | book | id   | author |  
+------+------+------+--------+  
|    1 | java |    2 | zhang  |  
|    2 | c++  |    2 | zhang  |  
|    3 | php  |    2 | zhang  |  
|    1 | java |    3 | wang   |  
|    2 | c++  |    3 | wang   |  
|    3 | php  |    3 | wang   |  
|    1 | java |    4 | li     |  
|    2 | c++  |    4 | li     |  
|    3 | php  |    4 | li     |  
+------+------+------+--------+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Natural Join 自然连接&lt;/strong&gt; 等价于使用using子句的Inner Join。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mysql&amp;gt; select * from table1 natural join table2;  
mysql&amp;gt; select * from table1 inner join table2 using (id);   
+------+------+--------+  
| id   | book | author |  
+------+------+--------+  
|    2 | c++  | zhang  |  
|    3 | php  | wang   |  
+------+------+--------+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Left Join 左外连接&lt;/strong&gt; 左外连接A、B表的意思就是将表A中的全部记录和表B中字段连接形成的记录集，这里注意的是最后出来的记录集会包括表A的全部记录。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mysql&amp;gt; select * from table1 left join table2 on table1.id=table2.id; 
+------+------+------+--------+  
| id   | book | id   | author |  
+------+------+------+--------+
|    1 | java | NULL | NULL   |  
|    2 | c++  |    2 | zhang  |  
|    3 | php  |    3 | wang   |  
+------+------+------+--------+ 
mysql&amp;gt; select * from table2 right join table1 using (id);   
+------+------+--------+  
| id   | book | author |  
+------+------+--------+  
|    1 | java | NULL   |  
|    2 | c++  | zhang  |  
|    3 | php  | wang   |  
+------+------+--------+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Right Join 右外连接&lt;/strong&gt; 右外连接和左外连接是类似的。为了方便数据库便于访问，推荐使用左外连接代替右外连接。&lt;/p&gt;
&lt;h3 id="inexists"&gt;三、in、exists&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="http://sunxiaqw.blog.163.com/blog/static/990654382013430105130443/"&gt;http://sunxiaqw.blog.163.com/blog/static/990654382013430105130443/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;查询相当于多个or条件的叠加&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;select * from user where userId in (1, 2, 3);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等效于&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;select * from user where userId = 1 or userId = 2 or userId = 3;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;not in与in相反，如下&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;select * from user where userId not in (1, 2, 3);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等效于&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;select * from user where userId != 1 and userId != 2 and userId != 3;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总的来说，in查询就是先将子查询条件的记录全都查出来，假设结果集为B，共有m条记录，然后在将子查询条件的结果集分解成m个，再进行m次查询。&lt;/p&gt;
&lt;p&gt;in查询的子条件返回结果必须只有一个字段，例如&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;select * from user where userId in (select id from B);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而不能是&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;select * from user where userId in (select id, age from B);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;exists&lt;/strong&gt;对外表用loop逐条查询，每次查询都会查看exists的条件语句，当exists里的条件语句能够返回记录行时(无论记录行是的多少，只要能返回)，条件就为真，返回当前loop到的这条记录，反之如果exists里的条件语句不能返回记录行，则当前loop到的这条记录被丢弃，exists的条件就像一个bool条件，当能返回结果集则为true，不能返回结果集则为false。&lt;/p&gt;
&lt;p&gt;如下：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;select * from user where exists (select 1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对user表的记录逐条取出，由于子条件中的select 1永远能返回记录行，那么user表的所有记录都将被加入结果集，所以与 select * from user;是一样的&lt;/p&gt;
&lt;p&gt;又如下：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;select * from user where exists (select * from user where userId = 0);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以知道对user表进行loop时，检查条件语句(select * from user where userId = 0),由于userId永远不为0，所以条件语句永远返回空集，条件永远为false，那么user表的所有记录都将被丢弃&lt;/p&gt;
&lt;p&gt;not exists与exists相反，也就是当exists条件有结果集返回时，loop到的记录将被丢弃，否则将loop到的记录加入结果集&lt;/p&gt;
&lt;p&gt;总的来说，如果A表有n条记录，那么exists查询就是将这n条记录逐条取出，然后判断n遍exists条件 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;和&lt;strong&gt;exists&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;in是把外表和内表作hash连接，而exists是对外表作loop循环，每次loop循环再对内表进行查询。&lt;/p&gt;
&lt;p&gt;如果查询的两个表大小相当，那么用in和exists差别不大；如果两个表中一个较小一个较大，则子查询表大的用exists，子查询表小的用in。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;若表A较小，表B较大&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;select * from A where cc in(select cc from B)　　--&amp;gt;效率低，用到了A表上cc列的索引；
select * from A where exists(select cc from B where cc=A.cc)　　--&amp;gt;效率高，用到了B表上cc列的索引。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相反的：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;select * from B where cc in(select cc from A)　　--&amp;gt;效率高，用到了B表上cc列的索引
select * from B where exists(select cc from A where cc=B.cc)　　--&amp;gt;效率低，用到了A表上cc列的索引。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;not in&lt;/strong&gt;和&lt;strong&gt;not exists&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;not in 逻辑上不完全等同于not exists&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Table1.
+-----+-----+
| c1  | c2  |
+-----+-----+
| 1   | 2   |
| 1   | 3   |
+-----+-----+
Table2.
+-----+-----+
| c1  | c2  |
+-----+-----+
| 1   | 2   |
| 1   | null|
+-----+-----+
select * from Table1 where c2 not in(select c2 from Table2);　　--&amp;gt;执行结果：无
select * from Table1 where not exists(select 1 from Table2 where Table2.c2=Table1.c2)　　--&amp;gt;执行结果：1　　3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;not in出现了不期望的结果集，存在逻辑错误。尽量不要使用not in(它会调用子查询)，而尽量使用not exists（它会调用关联子查询）。如果子查询中返回的任意一条记录含有空值，则not in查询将不返回任何记录。如果子查询字段有非空限制，这时可以使用not in。&lt;/p&gt;
&lt;p&gt;如果查询语句使用了not in，那么对内外表都进行全表扫描，没有用到索引；而not exists的子查询依然能用到表上的索引。所以无论哪个表大，用not exists都比not in 要快。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt;和&lt;strong&gt;=&lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;select name from student where name in('zhang','wang','zhao');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;与&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;select name from student where name='zhang' or name='wang' or name='zhao'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;的结果是相同的。&lt;/p&gt;
&lt;h3 id="group-by"&gt;四、group by&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;group by&lt;/strong&gt;语法可以根据给定数据列的每个成员对查询结果进行分组统计，最终得到一个分组汇总表。一般结合avg(),count()等进行统计。&lt;/p&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Table1.
+----+-------+
| Id | value |
+----+-------+
| 1  | 2     |
| 2  | 3     |
| 1  | 2     |
| 2  | 5     |
| 3  | 4     |
+----+-------+ 
select Id, avg(value) from Table1 group by Id;
+----+----------+
| Id |avg(value)|
+----+----------+
| 1  | 2        |
| 2  | 4        |
| 3  | 4        |
+----+----------+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还可以使用&lt;strong&gt;having&lt;/strong&gt;子句测试一个统计结果，放在group by子句之后。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;select Id, avg(value) from Table1 group by Id having having count(*) &amp;gt; 1;
+----+----------+
| Id |avg(value)|
+----+----------+
| 1  | 2        |
| 2  | 4        |
+----+----------+
&lt;/pre&gt;&lt;/div&gt;</summary><category term="database"></category></entry></feed>