<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>lhqqqqq's BLOG</title><link href="lhqqqqq.github.io/" rel="alternate"></link><link href="http://lhqqqqq.github.io/feeds/cpp.atom.xml" rel="self"></link><id>lhqqqqq.github.io/</id><updated>2015-04-30T20:36:39+08:00</updated><entry><title>动态内存与智能指针</title><link href="lhqqqqq.github.io/cpp/shared_ptr.html" rel="alternate"></link><updated>2015-04-30T20:36:39+08:00</updated><author><name>lhqqqqq</name></author><id>tag:,2015-04-30:lhqqqqq.github.io/cpp/shared_ptr.html</id><summary type="html">&lt;h2 id="from-c-primer"&gt;from 《C++ Primer》&lt;/h2&gt;
&lt;h3 id=""&gt;一、动态内存&lt;/h3&gt;
&lt;p&gt;程序使用的&lt;strong&gt;内存&lt;/strong&gt;包括：静态内存、栈内存动态内存；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;静态内存&lt;/strong&gt;用来保存局部static对象、类static数据成员和定义在任何函数之外的变量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈内存&lt;/strong&gt;用来保存定义在函数内的非static对象。&lt;/p&gt;
&lt;p&gt;分配在静态或栈内存中的对象由编译器自动创建和销毁。对于栈对象，仅在其定义的程序块运行时才存在；static对象在使用之前分配，在程序结束时销毁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动态内存&lt;/strong&gt;被称作自由空间（free store）或堆（heap）。程序用堆来存储动态分配的对象，即那些在程序运行时分配的对象。动态对象的生存期由程序来控制，即不再使用时，代码必须显示地销毁。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;STL容器均是使用动态内存！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;C++中，使用&lt;strong&gt;new&lt;/strong&gt;和&lt;strong&gt;delete&lt;/strong&gt;这对&lt;strong&gt;运算符&lt;/strong&gt;来管理动态内存。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;new和delete是运算符，malloc和free是库函数。&lt;a href="http://www.cnblogs.com/biyeymyhjob/archive/2012/07/16/2593754.html"&gt;它们的不同？&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;new&lt;/strong&gt;：在动态内存中为对象分配空间并返回一个指向该对象的指针。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;delete&lt;/strong&gt;：接受一个动态对象的指针，销毁该对象，并释放与之关联的内存。&lt;/p&gt;
&lt;h3 id="newdelete"&gt;二、new和delete&lt;/h3&gt;
&lt;p&gt;在自由空间分配的内存是无名的，因此new无法为其分配的对象命名，而是返回一个指向该对象的指针。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;int *pi = new int；
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认情况下，动态分配的对象是默认初始化的，即内置类型或组合类型的对象的值是未定义的，类类型的对象将采用默认初始化函数进行初始化。&lt;/p&gt;
&lt;p&gt;可以使用直接初始化：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;int *pi = new int(1124);
stirng *ps = new string(10, '9');
vector&amp;lt;int&amp;gt; *pv = new vector&amp;lt;int&amp;gt;{0,1,2,3,4}; //新标准的列表初始化
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于内置类型，若未直接初始化，也应当值初始化：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;int *pi1 = new int;     //默认初始化，*pi1的值未定义
int *pi2 = new int();   //值初始化为0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;delete表达式接受一个指针，指向要释放的对象，将动态内存归还给系统。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;delete p;   //p为指向一个动态分配的对象或一个空指针
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当delete一个指针后，虽然指针值无效，但其上仍保存着已经释放了的动态内存的地址，称为空悬指针（dangling pointer），即指向一块曾经保存数据对象但现在已经无效的内存的指针。可以在delete之后，将nullptr赋予指针，支出指针不指向任何对象。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;delete p;
p = nullptr;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;nullptr为C++11标准引入的特殊类型的字面值，表示空指针，代替预处理常量NULL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;三、智能指针&lt;/h3&gt;
&lt;p&gt;不正确释放动态内存，会引发问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;忘记释放内存，会产生&lt;strong&gt;内存泄露&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;在尚有指针引用内存的情况下释放，会产生&lt;strong&gt;引用非法内存&lt;/strong&gt;的指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了更容易且更安全地使用动态内存，C++11标准引入（boost库中已有）两种&lt;strong&gt;智能指针（smart pointer）&lt;/strong&gt;类型来管理动态对象。智能指针与常规指针的区别是它在负责自动释放所指向的对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;shared_ptr&lt;/strong&gt;允许多个指针指向同一对象；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unique_str&lt;/strong&gt;独占所指向的对象；&lt;/li&gt;
&lt;li&gt;还有一种名为&lt;strong&gt;weak_ptr&lt;/strong&gt;的伴随类，它是一种&lt;a href="reference.html"&gt;弱引用&lt;/a&gt;，指向shared_ptr所管理的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述三种类型都定义在memory头文件中。&lt;/p&gt;
&lt;p&gt;创建：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;shared_ptr&amp;lt;string&amp;gt; p1;      //可以指向string的shared_ptr
shared_ptr&amp;lt;lit&amp;lt;int&amp;gt;&amp;gt; p1;    //可以指向int的list的shared_ptr
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;智能指针的使用（如判断、指向、解引用）与普通指针相同。&lt;/p&gt;
&lt;p&gt;智能指针的操作：&lt;/p&gt;
&lt;p&gt;shared_ptr和unique_ptr均支持的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;shared_ptr&lt;t&gt; sp/unique_ptr&lt;t&gt; up &lt;/t&gt;&lt;/t&gt;&lt;/p&gt;
&lt;p&gt;空智能指针，可以指向T类型的对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;p &lt;/p&gt;
&lt;p&gt;将p作为条件判断，空则为false，指向一个对象则为true&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;*p        &lt;/p&gt;
&lt;p&gt;解引用p&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;p.get()   &lt;/p&gt;
&lt;p&gt;返回p中保存的指针&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;swap(p,q)/p.swap(q)   &lt;/p&gt;
&lt;p&gt;交换p和q中的指针&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有shared_ptr支持的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;make_shared&lt;t&gt;(args)&lt;/t&gt;&lt;/p&gt;
&lt;p&gt;返回一个shared_ptr，指向一个动态分配的T类型对象，使用args初始化此对象（最安全的分配和使用动态内存的方法！）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;p.use_count()         &lt;/p&gt;
&lt;p&gt;返回p共享对象的智能指针量（可能很慢！用于调试！）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;p.unique()            &lt;/p&gt;
&lt;p&gt;若p.use_count()为1，返回true；否则返回false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;share_ptr&lt;t&gt; p(q) &lt;/t&gt;&lt;/p&gt;
&lt;p&gt;p是q的拷贝；会递增q中的计数器。（q中的指针必须能转换成*T!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;p = q     &lt;/p&gt;
&lt;p&gt;此操作会递减p的引用计数，递增q中的引用计数；若p的引用计数变为0，则将其管理的原内存释放（p和q都是shared_ptr，且保存的指针必须能相互转换！）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体示例：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;//指向一个值为9的int的shared_ptr
share_ptr&amp;lt;int&amp;gt; p1 = make_shared&amp;lt;int&amp;gt;(9);
//指向一个值为"hello"的string的shared_ptr
share_ptr&amp;lt;string&amp;gt; p2 = make_shared&amp;lt;string&amp;gt;("hello");
//指向一个值初始化的(对于int为0)int的shared_ptr
share_ptr&amp;lt;int&amp;gt; p3 = make_shared&amp;lt;int&amp;gt;();
//可以使用auto，这里指向空的string组成的vector
auto p4 = make_shared&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当进行拷贝或赋值操作时，每个shared_ptr都会记录有多少个其他shared_ptr指向相同的对象：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;auto q(p1);     //q和p1均指向相同的int对象9，此对象有两个引用者。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每个shared_ptr都有一个关联计数器，称为&lt;strong&gt;引用计数（reference count）&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引用计数递增：拷贝（如拷贝初始化、作为参数传递给函数、作为函数的返回值）；&lt;/li&gt;
&lt;li&gt;引用计数递减：赋予新值、被销毁（如离开作用域）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;shared_ptr的析构函数使其具有管理动态内存的功能。它会递减shared_ptr所指向的对象的引用计数。如果引用计数变为0，就会销毁对象，并释放所占用的内存。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;auto r = make_shared&amp;lt;int&amp;gt;(4);   //r指向的int只有一个引用者
r = q;                          //给r赋值，则r原来指向的对象的引用计数递减
                                //r原来指向的对象已没有引用者，会自动释放
                                //q指向的对象的引用计数递增
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以这样使用shared_ptr：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;//factory返回一个shared_ptr，指向一个动态分配的对象
shared_ptr&amp;lt;Foo&amp;gt; factory(T arg) {
    ...
    return make_shared&amp;lt;Foo&amp;gt;(arg);
}

void use_factory(T arg) {
    shared_ptr&amp;lt;Foo&amp;gt; p = factory(arg);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于p是局部变量，在函数结束时将被销毁。在p被销毁时，其引用计数递减。在此由于p是唯一引用factory返回的内存的对象，所以引用计数将为0，则p所指的对象也会被销毁，所占用内存会被释放。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;void use_factory(T arg) {
    shared_ptr&amp;lt;Foo&amp;gt; p = factory(arg);
    return p;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里做了更改，return一个p的拷贝，这会递增其引用计数。当p被销毁时，由于它所指向的内存还有其他使用者，所以不会被释放。&lt;/p&gt;
&lt;p&gt;使用智能指针可以在多个对象间共享数据，即多个对象保存相同内容（存放在动态内存中）。这样，当一个对象被销毁时，不影响其他的对象；只有所有指向该内存的对象都被销毁时，该内存才会被释放。&lt;/p&gt;
&lt;h3 id="shared_ptr"&gt;四、shared_ptr的实现&lt;/h3&gt;</summary><category term="C++"></category></entry><entry><title>C++11新特性记录</title><link href="lhqqqqq.github.io/cpp/cpp11.html" rel="alternate"></link><updated>2015-04-08T09:23:50+08:00</updated><author><name>lhqqqqq</name></author><id>tag:,2015-04-08:lhqqqqq.github.io/cpp/cpp11.html</id><summary type="html">&lt;p&gt;-
1. C++11&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;C++11标准是 ISO/IEC 14882:2011 - Information technology -- Programming languages -- C++ 的简称。
C++11标准由国际标准化组织（ISO）和国际电工委员会（IEC）旗下的C++标准委员会（ISO/IEC JTC1/SC22/WG21）于2011年8月12日公布，并于2011年9月出版。2012年2月28日的国际标准草案(N3376)是最接近于C++11标准的草案（仅编辑上的修正）。此次标准为C++98发布后13年来第一次重大修正。
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;auto &amp;amp; decltype&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;auto&lt;/strong&gt;：让编译器分析表达式所属的类型。auto定义的变量必须有初始值。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;auto i = 1, *p = &amp;amp;i; //整型，整型指针
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应用在容器中&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;auto len = str.size(); //len的类型是string::size_type
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应用在容器的迭代器中&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;vector&amp;lt;int&amp;gt; v{1, 2, 3};
for （auto it = v.begin(); it != v.end; ++i）
    (*it)++;
//it的类型为vector&amp;lt;int&amp;gt;::iterator
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;decltype&lt;/strong&gt;：选择并返回操作数的数据类型。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;decltype(f()) sum = x;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译器不实际调用函数f，而是使用f返回值类型来作为sum的类型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;decltype((variable))的结果永远是引用，decltype(variable)的结果只有当variable本身是引用时才是引用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;范围for语句&lt;/p&gt;
&lt;p&gt;遍历给定序列中的每个元素并对序列中的每个值执行某种操作&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;for (declaration: expression)
    statement
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;expression部分是一个对象，用于表示一个序列；declaration部分负责定义一个变量，该变量将被用于访问序列中的基础元素。
如：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;string str("Hello world!");
for (auto c : str)
    cout &amp;lt;&amp;lt; c &amp;lt;&amp;lt;endl;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列表初始化&lt;/p&gt;
&lt;p&gt;列表初始化不再局限于数组。无论是初始化对象还是某些时候为新对象赋值，都可以使用一组花括号括起来的初始值。&lt;/p&gt;
&lt;p&gt;如，容器初始化&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;vector&amp;lt;int&amp;gt; v = {1, 2, 3};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;vector&amp;lt;int&amp;gt; v{1, 2, 3};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;取代以前的方法：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;int arr[3] = {1, 2, 3}  
vector&amp;lt;int&amp;gt; v(arr, arr + 3);
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="shared_ptr.html"&gt;智能指针&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无序关联容器
    关键字类型固有且无序，使用哈希函数和关键字类型的==运算符来组织元素。
    包括unordered_map，unordered_set，unordered_multimap，unordered_multiset。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;待续&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="C++"></category></entry><entry><title>C++中的引用</title><link href="lhqqqqq.github.io/cpp/reference.html" rel="alternate"></link><updated>2015-04-07T15:04:40+08:00</updated><author><name>lhqqqqq</name></author><id>tag:,2015-04-07:lhqqqqq.github.io/cpp/reference.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;from 《C++ Primer》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=""&gt;一、概念&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;引用（reference）&lt;/strong&gt;的符号为&amp;amp;，一般指“左值引用”，作用是为对象起一个别名。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C++11引入了一种“右值引用”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;定义引用时，程序把初始值和对象绑定在一次。之后，这种绑定关系会一直存在，所以引用必须初始化。
引用本身不是对象。&lt;/p&gt;
&lt;h1 id="_1"&gt;二、示例&lt;/h1&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;int ival = 1024;
int &amp;amp;refVal = ival; //引用，即refVal是ival的别名
int &amp;amp;refVal2; //报错，引用必须被初始化
int &amp;amp;refVal3 = 10; //报错，引用的初始值必须是对象
double dval = 3.14;
int &amp;amp;refVal4 = dval; //报错，类型不一致
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="_1_2"&gt;三、有用的地方&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据交换，传递引用参数，可以改变原值&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;int swap(int &amp;amp;a, int &amp;amp;b)
{
    int tmp = a;
    a = b;
    b = tmp;    
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拷贝构造函数传递的参数必须为引用形式，否则会循环调用；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《C++ Primer》 P442&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传入参数为引用类型，可以避免从形参到实参的一次复制构造函数，减少无谓的消耗，提高代码效率&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《剑指offer》 P25&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;未完待续&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="_1_2_3"&gt;四、弱引用与强引用&lt;/h1&gt;
&lt;p&gt;C语言中有&lt;a href="http://blog.csdn.net/astrotycoon/article/details/8008629"&gt;强符号与弱符号&lt;/a&gt;的概念。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有用的命令:nm，列出指定文件的所有符号（包括静态和动态链接库）
&lt;a href="http://www.cnblogs.com/itech/archive/2012/09/16/2687423.html"&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="1"&gt;1.为什么有引用计数&lt;/h2&gt;
&lt;p&gt;C++中存在两种语义：值语义（value sematics）和对象语义（object sematic），对象语义也可以叫做引用语义（reference sematics）。&lt;/p&gt;
&lt;p&gt;值语义，指的是对象的拷贝与原对象无关，就像拷贝int一样，C++的常用类型数据等都是值语义。&lt;/p&gt;
&lt;p&gt;对象语义，指的是面向对象意义下的对象，是禁止拷贝的。
在设计一个类的时候该类是否可以被拷贝（即具备拷贝构造函数），取决于拷贝后的语义是否成立，比如一个Thread类，拷贝后系统中并不会启动另外一个线程，所以拷贝是禁止的。同样类似于Employee雇员类也是。
这么设计起码有两个好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;语义合理，有些对象复制是不符合常理的&lt;/li&gt;
&lt;li&gt;节省内存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在多线程程序中，一个对象如果被多个线程访问，一般使用shared_ptr，通过引用计数来保证对象不被错误的释放导致其他线程访问出现问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;shared_ptr：&lt;a href="shared_ptr.html" title="智能指针"&gt;智能指针&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="2"&gt;2.强引用&lt;/h2&gt;
&lt;p&gt;当对象被创建时，计数为1；每创建一个变量引用该对象时，该对象的计数就增加1；当上述变量销毁时，对象的计数减1，当计数为0时，这个对象也就被析构了。&lt;/p&gt;
&lt;p&gt;强引用：即当至少有一个强引用时，对象就不能被释放。shared_ptr就是如此。&lt;/p&gt;
&lt;p&gt;强引用计数在很多种情况下都是可以正常工作的，但是也有不凑效的时候，当出现循环引用时，就会出现严重的问题，以至于出现内存泄露。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Class Parent  
{  
public:  
    // ...  
private:  
    shared_ptr&amp;lt;Child&amp;gt; m_child;  
}

Class Child  
{  
public:  
    // ...  
private:  
    shared_ptr&amp;lt;Parent&amp;gt; m_parent;  
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于两个类之间互相引用，它们的计数都是1，最后谁也不会被释放，就导致了内存泄漏。&lt;/p&gt;
&lt;p&gt;一般解除循环引用有三种办法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;手动释放&lt;/li&gt;
&lt;li&gt;如果Parent拥有Child，即Parent的生存期比Child大，那么Child就使用一个普通的指针&lt;/li&gt;
&lt;li&gt;使用弱引用的智能指针打破循环引用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虽然这三种方法都可行，但方法1和方法2都需要程序员手动控制，麻烦且容易出错。&lt;/p&gt;
&lt;h2 id="3"&gt;3.弱引用&lt;/h2&gt;
&lt;p&gt;弱引用：它仅仅是对象存在时候的引用，当对象不存在时弱引用能够检测到，从而避免非法访问，弱引用也不会修改对象的引用计数。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;template&amp;lt;typename T&amp;gt; class weak_ptr  
{  
    public:  
        template &amp;lt;typename Y&amp;gt;  
        weak_ptr(const shared_ptr&amp;lt;Y&amp;gt;&amp;amp; r);

        weak_ptr(const weak_ptr&amp;amp; r);

        ~weak_ptr();

        T* get() const;   
        bool expired() const;   
        shared_ptr&amp;lt;T&amp;gt; lock() const;  
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义变量：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;shared_ptr&amp;lt;T&amp;gt; t(new T);
weak_ptr&amp;lt;T&amp;gt; ptr(t); // t为一个T对象
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;则当t被销毁时，ptr 被自动置为无效。使用方法如下：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;if ( shard_ptr&amp;lt;T&amp;gt; safePtr = ptr.lock() )  safePtr-&amp;gt;Fun();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;weak_ptr必须从一个share_ptr或另一个weak_ptr转换而来，这也说明，进行该对象的内存管理的是那个强引用的share_ptr。weak_ptr只是提供了对管理对象的一个访问手段。&lt;/p&gt;
&lt;p&gt;弱引用指针可以有效的解除循环引用，但这种方式必须在程序员能预见会出现循环引用的情况下才能使用，也可以是说这个仅仅是一种编译期的解决方案，如果程序在运行过程中出现了循环引用，还是会造成内存泄漏的。&lt;/p&gt;</summary><category term="C++"></category></entry></feed>